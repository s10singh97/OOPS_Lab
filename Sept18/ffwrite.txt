IT MUST BE DRIVEN BY ACTUAL PROBLEMS AND ITS FEATURES SHOULD BE USEFUL IMMEDIATELY IN REAL WORLD PROGRAMS.
EVERY FEATURE SHOULD BE IMPLEMENTABLE (WITH A REASONABLY OBVIOUS WAY TO DO SO).
PROGRAMMERS SHOULD BE FREE TO PICK THEIR OWN PROGRAMMING STYLE, AND THAT STYLE SHOULD BE FULLY SUPPORTED BY C++.
ALLOWING A USEFUL FEATURE IS MORE IMPORTANT THAN PREVENTING EVERY POSSIBLE MISUSE OF C++.
IT SHOULD PROVIDE FACILITIES FOR ORGANISING PROGRAMS INTO WELL-DEFINED SEPARATE PARTS, AND PROVIDE FACILITIES FOR COMBINING SEPARATELY DEVELOPED PARTS.
NO IMPLICIT VIOLATIONS OF THE TYPE SYSTEM (BUT ALLOW EXPLICIT VIOLATIONS; THAT IS, THOSE EXPLICITLY REQUESTED BY THE PROGRAMMER).
USER-CREATED TYPES NEED TO HAVE THE SAME SUPPORT AND PERFORMANCE AS BUILT-IN TYPES.
UNUSED FEATURES SHOULD NOT NEGATIVELY IMPACT CREATED EXECUTABLES (E.G. IN LOWER PERFORMANCE).
THERE SHOULD BE NO LANGUAGE BENEATH C++ (EXCEPT ASSEMBLY LANGUAGE).
C++ SHOULD WORK ALONGSIDE OTHER EXISTING PROGRAMMING LANGUAGES, RATHER THAN FOSTERING ITS OWN SEPARATE AND INCOMPATIBLE PROGRAMMING ENVIRONMENT.
IF THE PROGRAMMER'S INTENT IS UNKNOWN, ALLOW THE PROGRAMMER TO SPECIFY IT BY PROVIDING MANUAL CONTROL..